#!/usr/bin/env python

# anatomy of a clock skew document:
# document = {
#    "type" = "clock_skew"
#    "server" = "name"
#    "partners" = {
#          server_name : [ td1, td2, ... ]
#          }
#     }

import pymongo
import logging
from datetime import datetime
from datetime import timedelta


def server_clock_skew(db, collName):
    """Given the mongodb entries generated by logl,
    attempts to detect and resolve clock skew
    across different servers."""
    logger = logging.getLogger(__name__)
    for doc_a in db[collName + ".servers"].find():
        a = doc_a["server_name"]
        if a == "unknown":
            logger.debug("Skipping unknown server")
            continue
        skew_a = db[collName + ".clock_skew"].find_one({"server": a})
        if not skew_a:
            skew_a = clock_skew_doc(a)
        for doc_b in db[collName + ".servers"].find():
            b = doc_b["server_name"]
            logger.info("Finding clock skew for {0} - {1}...".format(a, b))
            if b == "unknown":
                logger.debug("Skipping unknown server")
                continue
            if a == b:
                logger.debug("Skipping identical server")
                continue
            if skew_a["partners"][b]:
                logger.debug("Clock skew already found for this server")
                continue
            skew_a["partners"][b] = {}
            skew_a["partners"][b].append(detect(a, b, db, collName))
            skew_b = db[collName + ".clock_skew"].find_one({"server":b})
            if not skew_b:
                skew_b = clock_skew_doc(b)
            # flip according to sign convention for other server:
            # if server is ahead, +t
            # if server is behind, -t
            skew_b["partners"][a] = {}
            for t in skew_a["partners"][b]:
                t = -t
                skew_b["partners"][a].append(t)
            db[collName + ".clock_skew"].save(skew_a)
            db[collName + ".clock_skew"].save(skew_b)

def detect(a, b, db, collName):
    """Detect any clock skew between a and b,
    and return it as a list of timedelta objects.  If
    unable to detect skew, return None."""
    entries_a = db[collName + ".entries"]
    entries_b = db[collName + ".entries"]
    cursor_a = entries_a.find({"type" : "status", "origin_server" : a, "info.server" : b})
    cursor_b = entries_b.find({"type" : "status", "origin_server" : b, "info.server" : "self"})
    cursor_a.sort("date")
    cursor_b.sort("date")
    logger = logging.getLogger(__name__)
    logger.debug("Detecting clock skew for pair {0} - {1}...".format(a, b))
    skews = {}
    min_time = timedelta(seconds=2)
    try:
        a_1 = cursor_a.next()
        b_1 = cursor_b.next()
    except StopIteration:
        logger.debug("Cursors are empty!")
        return None
    # take and compare two consecutive entries from each cursor
    while True:
        try:
            logger.debug("Using next set of entries")
            a_2 = cursor_a.next()
            b_2 = cursor_b.next()
            # if first entries do not match, advance A
            while a_1["info"]["state_code"] != b_1["info"]["state_code"]:
                logger.debug("first entries do not match")
                a_1 = a_2
                a_2 = cursor_a.next()
            # if first entries match but not second ones, advance A and B
            if (a_1["info"]["state_code"] == b_1["info"]["state_code"]) and (a_2["info"]["state_code"] != b_2["info"]["state_code"]):
                logger.debug("first entries match, but not second ones")
                continue
            # if both first and second entries match, take clock skew
            # (fix me so I work better please...)
            if (a_1["info"]["state_code"] == b_1["info"]["state_code"]) and (a_2["info"]["state"] == b_2["info"]["state"]):
                logger.debug("Both entries match!  Calculating clock skew")
                td1 = a_1["date"] - b_1["date"]
                td2 = a_2["date"] - b_2["date"]
                # if td1 and td2 are wildly different, append both
                diff = td1 - td2
                if abs(diff) < min_time:
                    logger.debug("td1 and td2 agree.  Big enough for clock skew?")
                # they agree.  But big enough for clock skew?
                    if abs(td1) > min_time:
                        logger.debug("clock skew found!  Returning {0}".format(td1))
                        if not in_skews(t1, skews):
                            skews.append(t1)
                    else:
                        logger.debug("Not big enough, 0 clock skew")
                        skews.append(timedelta(0))
                else:
                    logger.debug("Found two different clock skew values")
                    if not in_skews(t1, skews):
                        skews.append(td1)
                    if not in_skews(t1, skews):
                        skews.append(td2)
            a_1 = a_2
            b_1 = b_2
        except StopIteration:
            logger.debug("Out of entries, return skew information")
            return skews


def in_skews(t, skews):
    """If this entry is not close in value
    to an existing entry in skews, return False"""
    for skew in skews:
        if abs(t) - abs(skews) < timedelta(seconds=2):
            return True
    return False


def clock_skew_doc(name):
    """Create and return an empty clock skew doc
    for this server"""
    logger = logging.getLogger(__name__)
    logger.debug("creating empty clock skew doc")
    doc = {}
    doc["server_name"] = name
    doc["type"] = "clock_skew"
    doc["partners"] = {}
    return doc

