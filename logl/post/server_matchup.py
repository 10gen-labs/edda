#!/usr/bin/env python
import pymongo


def server_matchup(db, collName):
    """Given the mongoDB entries generated by logl,
    attempts to resolve any differences in server names
    or missing server names across entries.  Returns
    1 on success, -1 on failure"""
    # check for clock skew in tandem with server name checking
    # --> check if coll.servers has any entries where server_num == origin_server
    # -----> if none, return
    # -----> for each such server:
    # ----------> for each message FROM this server (a):
    # ---------------> if the message is an important status change about itself
    # ---------------> (not SECONDARY, b/c multiple rs can be SECONDARY?)
    # ---------------> (not STARTUP2, b/c no server name means probably no startup msg)
    # ---------------> (PRIMARY, ARBITER, RECOVERING, DOWN (w/ exit))
    # ---------------> find all status messages from other servers about a with same state
    # ---------------> check if the other servers' messages align in time (with clock skew) and are about the same unnamed server
    # ---------------> if other times agree, take that as this server's name, and calculate clock skew with it.

    for doc in collName[servers].find()
        if doc["server_name"] == "unknown"
            cursor = collName[.entries].find({"origin_server" : doc["server_num"], "type": "status"})
            if cursor.alive():
                while True:
                    code = doc["info"]["state_code"]
                    if code == 2 or code == 5:
                        if cursor.alive():
                            cursor = cursor.next()
                            continue
                    else
                        cursor2 = colName[.entries].find({"type": "status", "info.state_code" : code})
                            for doc2 in 

                    if cursor.alive():
                        cursor = cursor.next()
                    else:
                        break
        elif:
            continue
    return -1
