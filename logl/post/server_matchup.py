#!/usr/bin/env python
import pymongo


def server_matchup(db, collName):
    """Given the mongoDB entries generated by logl,
    attempts to resolve any differences in server names
    or missing server names across entries.  Returns
    1 on success, -1 on failure"""
    # check for clock skew in tandem with server name checking
    # --> check if coll.servers has any entries where server_num == origin_server
    # -----> if none, return
    # -----> for each such server:
    # ----------> for each message FROM this server (a):
    # ---------------> if the message is an important status change about itself
    # ---------------> (not SECONDARY, b/c multiple rs can be SECONDARY?)
    # ---------------> (not STARTUP2, b/c no server name means probably no startup msg)
    # ---------------> (PRIMARY, ARBITER, RECOVERING, DOWN (w/ exit))
    # ---------------> find all status messages from other servers about a with same state
    # ---------------> check if the other servers' messages align in time (with clock skew) and are about the same unnamed server
    # ---------------> if other times agree, take that as this server's name, and calculate clock skew with it.

    for doc in collName[servers].find():
        if doc["server_name"] == "unknown":
            entries_a = db[collName + ".entries"]
            #cursor_a = entries_a.find({"type" : "status", "origin_server" : a, "info.server" : b})
            cursor_a = entries_a.find({"origin_server" : doc["server_num"], "type": "status" , "info.server" : "self"})
            cursor_a.sort("date")
            #needs to be fixed, doesn't work
            if cursor.alive():
                while True:
                    try:
                        code = doc["info"]["state_code"]
                        if code == 2 or code == 5:
                            cursor = cursor.next()
                            continue
                        else:
                        #like last time, itterating through cursors needs to be fixed
                            cursor_b = entries_a.find({"type": "status", "info.state_code": code, "origin_server" : {"$ne": doc["server_num"]}})
                            cursor b.sort("date")
                            while True:
                                doc[server_name] = cursor_b["info"]["server"] 
                                cursor2 = cursor2.next()

                    except StopIteration:
                        continue

                    cursor = cursor.next()
        else:
            continue
    return -1
