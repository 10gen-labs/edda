# Copyright 2012 10gen, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#!/usr/bin/env python
import pymongo
import logging

def server_matchup(db, collName):
    """Given the mongoDB entries generated by logl,
    attempts to resolve any differences in server names
    or missing server names across entries.  Returns
    1 on success, -1 on failure"""
    # check for clock skew in tandem with server name checking
    # --> check if coll.servers has any entries where server_num == server_name
    logger = logging.getLogger(__name__)

    servers = db[collName + ".servers"]
    server_count = servers.find().count()

    # no servers
    if server_count == 0:
        return 1

    # no unknown servers
    unknowns = servers.find({"server_name" : "unknown"})
    if not unknowns.alive:
        return 1

    # all servers are unknown
    # this case could probably be handled for cases where server_count > 1
    unknown_count = unknowns.count()
    logger.debug("attempting to name {0} unnamed servers".format(unknown_count))
    if server_count == unknown_count:
        return -1

    knowns = servers.find({"server_name" : { "$ne" : "unknown"}})
    failures = 0
    # -----> for each such server:
    for unknown in unknowns:
    # ----------> for each message FROM this server (only state changes and exit messages, for now):
        sent_msgs = db[collName + ".entries"].find({"origin_server" : unknown["server_num"], "$or" : [{"type" : "status"}, {"type" : "exit"}] })
        if not sent_msgs.alive:
            failures += 1
            continue
        msgs = []
        for msg in sent_msgs:
            msgs.append(msg)
        for i in range(0, len(msgs)):
            continue
    # ---------------> if the message is an important status change about itself
    # ---------------> (not SECONDARY, b/c multiple rs can be SECONDARY?)
    # ---------------> (not STARTUP2, b/c no server name means probably no startup msg)
    # ---------------> (PRIMARY, ARBITER, RECOVERING, DOWN (w/ exit))
    # ---------------> find all status messages from other servers about a with same state
    # ---------------> check if the other servers' messages align in time (with clock skew) and are about the same unnamed server
    # ---------------> if other times agree, take that as this server's name, and calculate clock skew with it.
    if failures > 0:
        logger.info("Unable to match names for {0} of {1} unnamed servers".format(failures, unknown_count))
        return -1
    logger.info("Successfully named {0} unnamed servers".format(unknown_count))
    return 1
