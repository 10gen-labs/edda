# Copyright 2012 10gen, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#!/usr/bin/env python
import pymongo
import logging
from clock_skew import server_clock_skew
import operator


def address_matching(db, collName):
    """Runs an algorithm to match servers with their
    corresponding hostnames/IP addresses.  The algorithm works as follows,
    using replica set status messages from the logs to find addresses:

    - Make a list, mentioned_names of all the IPs being talked about;
    these must be all the servers in the network.
    - For each server (S) in the collName.servers collection, if it
    already has been matched to an IP address and hostname, remove
    these addresses from mentioned_names.  Move to next server.
    - Else, make a list of the addresses (S) mentions, neighbors_of_s
    - Find all neighbors of (S) and the addresses they mention (their neighbors)
    - Make a list of addresses that ALL neighbors of (S) mention, neighbor_names
    - By process of elimination between neighbors_of_s and neighbor_names, see if
    there remains one address in neighbor_names which (S) has not
    mentioned in its log entries.  This must be (S)'s address.  Remove this
    address from mentioned_names.
    - Repeat this process until mentioned_names is empty trying each server
    round-robin, or until all servers have been unsuccessfully tried since the last
    change was made to mentioned_names.

    This algorithm is only sound when the user provides a
    log file from every server in the network, and complete when
    the network graph was complete, or was a tree (connected and acyclic)"""
    pass


def server_matchup(db, collName):
    """Given the mongoDB entries generated by logl,
    attempts to resolve any differences in server names
    or missing server names across entries.  Returns
    1 on success, -1 on failure"""
    # check for clock skew in tandem with server name checking
    # --> check if coll.servers has any entries where server_num == server_name
    logger = logging.getLogger(__name__)

    servers = db[collName + ".servers"]
    entries = db[collName + ".entries"]
    clock_skew = db[collName + ".clock_skew"]
    server_count = servers.find().count()

    # no servers
    if server_count == 0:
        return 1

    # no unknown servers
    unknowns = servers.find({"server_name" : "unknown"})
    unknown_count = unknowns.count()
    if unknown_count == 0:
        return 1

    # all servers are unknown
    # this case could probably be handled for cases where server_count > 1
    logger.debug("attempting to name {0} unnamed servers".format(unknown_count))
    if server_count == unknown_count:
        return -1

    # find a list of all unnamed servers being talked about
    unmatched_names = []
    cursor = entries.distinct("info.server")
    for name in cursor:
        if name == "self":
            continue
        if servers.find_one({"server_name" : name}):
            continue
        unmatched_names.append(name)
    # if there are no free names and still unknown servers, failure.
    if len(unmatched_names) == 0:
        return -1

    failures = 0
    candidates = {}

    # match up the names!
    for unknown in unknowns:
        num = str(unknown["server_num"])
        # if we're on the last name, winner!!
        if len(unmatched_names) == 1:
            candidates[iter(unmatched_names).next()] = 1
        else:
            for name in unmatched_names:
                logger.debug("Trying name {0} for server {1}".format(name, num))
                # in the .servers coll, replace server_name for unknown with name
                unknown["server_name"] = name
                servers.save(unknown)
                # in the .entries coll, replace origin_server from unknown["server_num"] to name
                entries.update({"origin_server": num}, {"$set": {"origin_server": name}}, multi=True)
                # run the clock skew algorithm
                clock_skew.remove({"server_num" : num})
                server_clock_skew(db, collName)
                # store name and highest weight clock skew from this round (with first named server)
                doc = clock_skew.find_one({"server_num" : num})
                wt = 0
                for partner in doc["partners"]:
                    for skew in doc["partners"][partner]:
                        if doc["partners"][partner][skew] > wt:
                            wt = doc["partners"][partner][skew]
                candidates[name] = wt
                logger.debug("storing candidate {0} with weight {1}".format(name, wt))
                # set the entries back to the original server_num
                entries.update({"origin_server": name}, {"$set": {"origin_server": num}}, multi=True)
        # select candidate with highest weight!
        wt = 0
        winner = ""
        for name in candidates.iterkeys():
            if candidates[name] >= wt:
                wt = candidates[name]
                winner = name
        # update db entries accordingly with winning name
        unknown["server_name"] = winner
        servers.save(unknown)
        entries.update({"origin_server" : num}, {"$set" : {"origin_server" : winner}}, multi=True)
        # run clock skew algorithm anew
        server_clock_skew(db, collName)
        logger.info("Naming this server {0}, removing {0} from list".format(winner, winner))
        unmatched_names.remove(winner)
        candidates = {}

    if failures > 0:
        logger.info("Unable to match names for {0} of {1} unnamed servers".format(failures, unknown_count))
        return -1
    logger.info("Successfully named {0} of {0} unnamed servers".format(unknown_count))
    return 1

