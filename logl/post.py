# anatomy of a clock skew document:
# document = {
#    "type" = "clock_skew"
#    "server" = "name"
#    "partners" = {
#          server_name : timedelta,
#          }
#     }


import pymongo
from datetime import datetime
from datetime import timedelta


def server_clock_skew(db, collName):
    """Given the mongodb entries generated by logl,
    attempts to detect and resolve clock skew
    across different servers.  Returns 1 on success,
    -1 on failure"""
    # for each server (a) entry:
    for doc_a in collName[servers].find():
        if doc_a["server_name"] == "unknown":
            continue
        # get this server's clock_skew document
        skew_a = collName[clock_skew].find_one({"server": doc_a["server_name"]})
        if skew_a is None:
            skew_a = clock_skew_doc(doc_a["server_name"])
        # check against every later server (b) entry:
        for doc_b in collName[servers]find():
            if doc_a["server_name"] == doc_b["server_name"]:
                continue
            if doc_b["server_name"] == "unknown":
                continue
            # skip if there is already clock skew data for this pair:
    # --> until (stable timedelta is found):
    # -------> take next two rsStatus entries from a about b
    # -------> find matching entries from b about itself
    # -------> compute timedelta for each entry
    # -------> FOR STARTERS: if two timedeltas are equal (to within some margin), this is the clock skew.
    # (we can probably fix this algorithm to better confirm clock skew...)
    return -1


def clock_skew_doc(name):
    """Create and return an empty clock skew doc
    for this server"""
    doc = {}
    doc["server_name"] = name
    doc["type"] = "clock_skew"
    doc["partners"] = {}
    return doc


def server_matchup(db, collName):
    """Given the mongoDB entries generated by logl,
    attempts to resolve any differences in server names
    or missing server names across entries.  Returns
    1 on success, -1 on failure"""
    # check for clock skew in tandem with server name checking
    # --> check if coll.servers has any entries where server_num == origin_server
    # -----> if none, return
    # -----> for each such server:
    # ----------> for each message FROM this server (a):
    # ---------------> if the message is an important status change about itself
    # ---------------> (not SECONDARY, b/c multiple rs can be SECONDARY?)
    # ---------------> (not STARTUP2, b/c no server name means probably no startup msg)
    # ---------------> (PRIMARY, ARBITER, RECOVERING, DOWN (w/ exit))
    # ---------------> find all status messages from other servers about a with same state
    # ---------------> check if the other servers' messages align in time (with clock skew) and are about the same unnamed server
    # ---------------> if other times agree, take that as this server's name, and calculate clock skew with it.
    return -1
